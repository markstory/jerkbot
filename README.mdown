# JerkBot

Jerkbot is intended as an integration testing server application.  As web application architectures become increasingly dependant on remote systems, its good to be prepared for when one of these services goes rogue and becomes a jerk. Jerkbot is intended as a tool to help you test what would happen if your integrating services started being total jerks.

Jerkbot allows you to provide a set of canned responses, and combine them with a variety of attitudes.  There are several built-in attitudes that can be used to stress integrating systems.

- Sending packets really slow.
- Only sending half the response.
- Sending the response n-times.
- Holding connections open and never replying, or delaying replying for a while.
- Piping the contents of /dev/urandom instead of useful content.
- Sending no response at all, just simply dropping connections.


## Using Jerkbot

Create a directory for jerkbot to run in.  You should create a directory with the following contents

	myjerk/
		jerk.json
		responses/
			some-response.xml

The `jerk.json` is a configuration file that lets you wire up responses to incoming urls, and the attitude you want to be used.  Once you've set up some canned responses and configured how jerkbot should run.  You can start jerkbot using the `jerkbot` command.

## Configuring Jerkbot

Configuring jerkbot is done using a JSON file.  This JSON file describes which urls map to which responses, and what kind of attitude should be used for those request url's.  A sample configuration file would look like:

	module.exports = {
		port: 8080
		responses: [
			{
				url: '/posts/index.json',
				attitude: 'half',
				response: './responses/some-response.xml'
			}
		]
	};

You can define one attitude per request path, you want to handle with jerkbot.  Depending on the type of attitude you use for each path, you'll need to create a canned response. This response file should contain the response the integrating system would normally expect.  If you are using either the `drop` or `random` you don't need to supply a response, as one will be created for you.

## Making canned responses

Canned responses are just plain text files, that can contain any content the system you are testing would normally get. The `response` value for any responder, should contain a path relative to the config file, pointing to the canned response.  This file will be read and used as the response when the associated url is visited.

## Running jerkbot

You start and stop jerkbot from the command line using the `jerkbot` executable.  There are a few options you can use with jerkbot:

- `config` specify the absolute path to the config file you want used.  Defaults `./jerk.js`.
- `verbose` Turn on verbose output.
- `help` Display the help.

## Issues

Is jerkbot being a jerk? Open a [ticket on github](http://github.com/markstory/jerkbot/issues)